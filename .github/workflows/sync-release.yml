name: Sync Release to Target Repository

on:
  workflow_run:
    workflows: ["Build and Upload APKs"]
    types:
      - completed
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Get Source Repository Latest Release
        id: get_source_release
        run: |
          SOURCE_REPO="your-username/your-repo-name"  # 替换为源仓库
          API_URL="https://api.github.com/repos/$SOURCE_REPO/releases/latest"
          
          # 获取源仓库最新的 Release 信息
          SOURCE_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $API_URL)
          
          if [ "$SOURCE_RELEASE" == "null" ]; then
            echo "No release found in the source repository."
            exit 1
          fi

          # 提取相关信息
          TAG_NAME=$(echo "$SOURCE_RELEASE" | jq -r '.tag_name')
          RELEASE_NAME=$(echo "$SOURCE_RELEASE" | jq -r '.name')
          BODY=$(echo "$SOURCE_RELEASE" | jq -r '.body')

          echo "Source Release Tag: $TAG_NAME"
          echo "Release Name: $RELEASE_NAME"
          echo "Release Body: $BODY"

      - name: Get Source Release Assets
        id: get_assets
        run: |
          SOURCE_REPO="${{ github.repository }}"  # 自动获取当前仓库名称
          API_URL="https://api.github.com/repos/$SOURCE_REPO/releases/tags/$TAG_NAME"

          # 获取源仓库该标签下的 Release 资产
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $API_URL)

          # 打印 API 响应内容进行调试
          echo "API Response: $RESPONSE"

          # 检查资产是否存在
          ASSETS=$(echo "$RESPONSE" | jq -r '.assets | select(length > 0) | .[] | {name: .name, browser_download_url: .browser_download_url}')

          if [ -z "$ASSETS" ]; then
            echo "No assets found for release $TAG_NAME."
            exit 1
          fi

          # 输出所有资产的 URL
          echo "Assets for release $TAG_NAME: $ASSETS"
          echo "$ASSETS" > assets.json
      
      

      - name: Download Assets from Source Repository
        id: download_assets
        run: |
          # 下载所有的资产文件
          mkdir -p downloaded_assets
          for asset in $(cat assets.json | jq -r '.name'); do
            url=$(cat assets.json | jq -r --arg asset "$asset" '.[] | select(.name == $asset) | .browser_download_url')
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o "downloaded_assets/$asset" $url
          done
          
          # 输出下载的文件列表
          echo "Downloaded assets:"
          ls downloaded_assets

      - name: Sync Release to Target Repository
        run: |
          TARGET_REPO="Xposed-Modules-Repo/fansirsqi.xposed.sesame"  # 目标仓库
          API_URL="https://api.github.com/repos/$TARGET_REPO/releases"

          # 检查目标仓库是否已有相同标签的 Release
          EXISTING_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.TARGET_REPO_PAT }}" \
               $API_URL | jq -r ".[] | select(.tag_name==\"$TAG_NAME\")")

          if [ "$EXISTING_RELEASE" != "null" ]; then
            # 删除已存在的 Release
            RELEASE_ID=$(echo "$EXISTING_RELEASE" | jq -r '.id')
            curl -X DELETE -H "Authorization: token ${{ secrets.TARGET_REPO_PAT }}" \
                 "https://api.github.com/repos/$TARGET_REPO/releases/$RELEASE_ID"
            echo "Deleted existing release with tag $TAG_NAME."
          fi

          # 创建新的 Release
          RELEASE_RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.TARGET_REPO_PAT }}" \
               -d '{
                     "tag_name": "'"$TAG_NAME"'",
                     "name": "'"$RELEASE_NAME"'",
                     "body": "'"$BODY"'",
                     "draft": false,
                     "prerelease": false
                   }' \
               $API_URL)

          # 提取 Release ID
          TARGET_RELEASE=$(echo "$RELEASE_RESPONSE" | jq -r '.id')

          if [ "$TARGET_RELEASE" == "null" ] || [ -z "$TARGET_RELEASE" ]; then
            echo "Failed to create Release in target repository."
            echo "Response: $RELEASE_RESPONSE"
            exit 1
          fi

          # 上传所有资产到目标仓库的 Release
          for asset in $(ls downloaded_assets); do
            curl -X POST -H "Authorization: token ${{ secrets.TARGET_REPO_PAT }}" \
                 -H "Content-Type: application/octet-stream" \
                 --data-binary @downloaded_assets/$asset \
                 "https://uploads.github.com/repos/$TARGET_REPO/releases/$TARGET_RELEASE/assets?name=$asset"
            echo "Uploaded asset: $asset"
          done